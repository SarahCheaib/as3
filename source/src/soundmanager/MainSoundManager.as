package soundmanager{	import flash.events.MouseEvent;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.MP3Loader;	import com.reintroducing.debug.Environment;	import com.reintroducing.events.SoundManagerEvent;	import com.reintroducing.sound.SoundManager;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.media.Sound;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		/** 	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class MainSoundManager extends MovieClip	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _env:Environment;		private var _sm:SoundManager;		private var _mp3Loader:MP3Loader;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function MainSoundManager()		{			super();						init();		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				/**		 *		 */		private function init():void		{			_env = Environment.getInstance();			_env.setPaths("../", "");						var s:Sprite = new Sprite();			s.graphics.beginFill(0xff0000, 1);			s.graphics.drawRect(0, 0, 100, 100);			s.graphics.endFill();			s.addEventListener(MouseEvent.MOUSE_UP, handleBoxClicked);						addChild(s);						var s2:Sprite = new Sprite();			s2.graphics.beginFill(0xffff00, 1);			s2.graphics.drawRect(0, 0, 100, 100);			s2.graphics.endFill();			s2.addEventListener(MouseEvent.MOUSE_UP, handleBox2Clicked);			s2.x = 100;						addChild(s2);						var s3:Sprite = new Sprite();			s3.graphics.beginFill(0xff00ff, 1);			s3.graphics.drawRect(0, 0, 100, 100);			s3.graphics.endFill();			s3.addEventListener(MouseEvent.MOUSE_UP, handleBox3Clicked);			s3.x = 200;						addChild(s3);						// Set up the sound manager and its listeners			_sm = SoundManager.getInstance();			_sm.addEventListener(SoundManagerEvent.SOUND_ITEM_ADDED, onSoundAdded);			_sm.addEventListener(SoundManagerEvent.SOUND_ITEM_LOAD_PROGRESS, onSoundProgress);			_sm.addEventListener(SoundManagerEvent.SOUND_ITEM_LOAD_COMPLETE, onSoundLoadComplete);			_sm.addEventListener(SoundManagerEvent.SOUND_ITEM_FADE_COMPLETE, onFadeComplete);			_sm.addEventListener(SoundManagerEvent.SOUND_ITEM_PLAY_COMPLETE, onPlayComplete);						// add a library sound			var Elephant:Class = (getDefinitionByName("Elephant") as Class);						_sm.addLibrarySound(Elephant, "elephant");						// add an external sound			_sm.addExternalSound(String(_env.basePath + "sounds/birds.mp3"), "birds");						// load an external sound through LoaderMax and upon load add it to the SoundManager			_mp3Loader = new MP3Loader(String(_env.basePath + "sounds/frogs.mp3"), {name: "frogs", autoPlay: false, onComplete: handleMP3Loaded}); 			_mp3Loader.load();			//			_sm.playSound("birds");//			_sm.playSound("elephant");		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				//- EVENT HANDLERS ----------------------------------------------------------------------------------------				/**		 *		 */		protected function handleBoxClicked($evt:MouseEvent):void		{//			_sm.playSound("birds");			_sm.playSound("elephant");		}				/**		 *		 */		protected function handleBox2Clicked($evt:MouseEvent):void		{//			_sm.playSound("birds");			//_sm.stopSound("elephant");			(_sm.areAllMuted) ? _sm.unmuteAllSounds() : _sm.muteAllSounds();		}				/**		 *		 */		protected function handleBox3Clicked($evt:MouseEvent):void		{			_sm.playSound("birds");		}				/**		 *		 */		private function handleMP3Loaded($evt:LoaderEvent):void		{			var frogs:Sound = LoaderMax.getContent("frogs");						_sm.addPreloadedSound(frogs, "frogs");//			_sm.playSound("frogs");		}				/**		 * 		 */		private function onSoundAdded($evt:SoundManagerEvent):void		{//			trace("SOUND: " + $evt.soundItem.name);		}				/**		 * 		 */		private function onSoundProgress($evt:SoundManagerEvent):void		{//			trace("SOUND: " + $evt.soundItem.name + " & PROGRESS: " + $evt.percent);		}				/**		 * 		 */		private function onSoundLoadComplete($evt:SoundManagerEvent):void		{//			trace("SOUND: " + $evt.soundItem.name + " & LENGTH: " + $evt.duration);//			trace("ALTERNATE METHOD: " + ($evt.soundItem.sound.length * .001));		}				/**		 * 		 */		private function onFadeComplete($evt:SoundManagerEvent):void		{//			trace("SOUND: " + $evt.soundItem.name + " FADE COMPLETE");		}				/**		 * 		 */		private function onPlayComplete($evt:SoundManagerEvent):void		{			trace("SOUND: " + $evt.soundItem.name + " PLAY COMPLETE");		}	//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			override public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}