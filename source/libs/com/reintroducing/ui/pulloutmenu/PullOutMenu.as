package com.reintroducing.ui.pulloutmenu{	import com.greensock.TweenMax;	import com.reintroducing.data.pulloutmenu.PullOutMenuData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getQualifiedClassName;	/**	 * Creates a menu like the classic dropdown menu with the options to direct it up, down, left, or right depending on values set.	 * 	 * CHANGE LOG:	 * 		v 1.3 - Made the class extend Sprite so it can be added to the stage.	 * 					 * 				Changed the constructor to accept PullOutMenuData object.	 * 					 * 				Changed interval check into an enter frame check.	 * 			 * 				Changed TweenLite to TweenMax.	 * 					 * 		v 1.2 - Added events OPEN/CLOSE that dispatch correspondingly.	 * 					 * 				Changed out Adobe's Tween class in favor of TweenLite.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.3	 */	public class PullOutMenu extends Sprite	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _startHeight:Number;		private var _endHeight:Number;		private var _openSpeed:Number;		private var _closeSpeed:Number;		private var _axis:String;		private var _easeFunc:Function;		private var _eventType:String;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------				public var container:Sprite;		public var masker:Sprite;		public var hitButton:Sprite;		public var itemHolder:Sprite;		//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Creates a new instance of the PullOutMenu class.		 * 		 * @param $pullOutMenuData The PullOutMenuData to use with the PullOutMenu.		 * 		 * <p>		 * The $pullOutMenuData object takes the following values:		 * <ul>		 * <li>hitButton: The Sprite used as the button you initially roll over or press to see the menu</li>		 * <li>itemHolder: The Sprite which holds the menu items</li>		 * <li>startPosition: A Number that represents the initial position of the menu (its resting state)</li>		 * <li>endPosition: A Number that represents the final position of the menu (after you have opened it)</li>		 * <li>openSpeed: An integer representing the speed you want your menu to open, in seconds (default: .25)</li>		 * <li>closeSpeed: An integer representing the speed you want your menu to close, in seconds (default: .25)</li>		 * <li>axis: A string representing the axis that the menu opens on, PullOutMenuData.AXIS_X or PullOutMenuData.AXIS_Y (default: PullOutMenuData.AXIS_Y)</li>		 * <li>tweenEase: A function representing the ease type you'd like to use, as per the TweenMax easing functions (default: Linear.easeOut)</li>		 * <li>eventType: A string representing when to trigger the showing of the menu, PullOutMenuData.TYPE_ROLL_OVER, PullOutMenuData.TYPE_PRESS, or PullOutMenuData.TYPE_RELEASE (default: PullOutMenuData.TYPE_ROLL_OVER)</li>		 * </ul>		 * </p>		 */		public function PullOutMenu($pullOutMenuData:PullOutMenuData)		{			_startHeight = $pullOutMenuData.startPosition;			_endHeight = $pullOutMenuData.endPosition;			_openSpeed = $pullOutMenuData.openSpeed;			_closeSpeed = $pullOutMenuData.closeSpeed;			_axis = $pullOutMenuData.axis;			_easeFunc = $pullOutMenuData.tweenEase;			_eventType = $pullOutMenuData.eventType;						hitButton = $pullOutMenuData.hitButton;			itemHolder = $pullOutMenuData.itemHolder;						addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true);		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Closes the menu and puts it in the initial position. Used also when a button inside the menu is pressed and the need to close the menu right then arises.		 * 		 * @return void		 */		public function closeMenu():void		{			removeEventListener(Event.ENTER_FRAME, checkOpen);						dispatchEvent(new Event(Event.CLOSE));						var xPos:Number = (_axis == PullOutMenuData.AXIS_X) ? _startHeight : itemHolder.x;			var yPos:Number = (_axis == PullOutMenuData.AXIS_Y) ? _startHeight : itemHolder.y;						TweenMax.to(itemHolder, _closeSpeed, {x: xPos, y: yPos, ease: _easeFunc});		}				/**		 * Enables operation of the menu.		 * 		 * @return void		 */		public function setEnabled():void		{			switch (_eventType)			{				case PullOutMenuData.TYPE_ROLL_OVER:					hitButton.addEventListener(MouseEvent.MOUSE_OVER, openMenu);					break;								case PullOutMenuData.TYPE_PRESS:					hitButton.addEventListener(MouseEvent.MOUSE_DOWN, openMenu);					break;								case PullOutMenuData.TYPE_RELEASE:					hitButton.addEventListener(MouseEvent.MOUSE_UP, openMenu);					break;			}		}				/**		 * Disables the menu from operation.		 * 		 * @return void		 */		public function setDisabled():void		{			switch (_eventType)			{				case PullOutMenuData.TYPE_ROLL_OVER:					hitButton.removeEventListener(MouseEvent.MOUSE_OVER, openMenu);					break;								case PullOutMenuData.TYPE_PRESS:					hitButton.removeEventListener(MouseEvent.MOUSE_DOWN, openMenu);					break;								case PullOutMenuData.TYPE_RELEASE:					hitButton.removeEventListener(MouseEvent.MOUSE_UP, openMenu);					break;			}		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------			/**		 *		 */		private function init($evt:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);						masker = new Sprite();			masker.graphics.beginFill(0xFF0000, 0);			masker.graphics.drawRect(0, 0, itemHolder.width, itemHolder.height);			masker.graphics.endFill();			masker.y = hitButton.height;						hitButton.x = 0;			hitButton.y = 0;						itemHolder.x = (_axis == PullOutMenuData.AXIS_Y) ? 0 : _startHeight;			itemHolder.y = (_axis == PullOutMenuData.AXIS_Y) ? _startHeight : 0;						masker.x = (_axis == PullOutMenuData.AXIS_Y) ? itemHolder.x : hitButton.width;			masker.y = (_axis == PullOutMenuData.AXIS_Y) ? hitButton.height : hitButton.y;						container = new Sprite();			container.addChild(itemHolder);			container.addChild(masker);			container.addChild(hitButton);						addChild(container);						itemHolder.mask = masker;						setEnabled();		}				/**		 * 		 */		private function openMenu($evt:MouseEvent):void		{			dispatchEvent(new Event(Event.OPEN));						var xPos:Number = (_axis == PullOutMenuData.AXIS_X) ? _endHeight : itemHolder.x;			var yPos:Number = (_axis == PullOutMenuData.AXIS_Y) ? _endHeight : itemHolder.y;						TweenMax.to(itemHolder, _openSpeed, {x: xPos, y: yPos, ease: _easeFunc});						addEventListener(Event.ENTER_FRAME, checkOpen);		}				/**		 * 		 */		private function checkOpen($evt:Event):void		{			var mx:Number = stage.mouseX;			var my:Number = stage.mouseY;			var isHitting:Boolean = container.hitTestPoint(mx, my);						if (!isHitting) closeMenu();		}	//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		override public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}