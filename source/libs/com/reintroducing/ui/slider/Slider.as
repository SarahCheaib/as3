package com.reintroducing.ui.slider{	import com.reintroducing.data.slider.SliderData;
	import com.reintroducing.events.SliderEvent;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;	import flash.utils.getQualifiedClassName;	/**	 * The Slider is a class that allows you to quickly create sliders with tracks without the need to use components.	 * There is a "percent" and a "currentValue" property that you can tap into to see what position the slider is at on the track.	 * The Slider dispatches a couple of custom events that also contain these values as well as the slider and track display objects.	 * <ul>	 * <li>SliderEvent.ON_PRESS - Dispatched when the slider is pressed</li>	 * <li>SliderEvent.ON_RELEASE - Dispatched when the slider is released</li>	 * <li>SliderEvent.ON_UPDATE - Dispatched while the slider is dragged or when the track is clicked</li>	 * <li>SliderEvent.ON_ENABLED - Dispatched when the slider is enabled</li>	 * <li>SliderEvent.ON_DISABLED - Dispatched when the slider is disabled</li>	 * </ul>	 * Please note that if you are using the Slider on the "y" axis your track's registration point needs to be on the	 * bottom (NOT the top) and the slider will go up to raise the value and down to lower it.  If you do not pay attention	 * to this your slider will be "broken".	 *  	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.8 	 */	public class Slider extends EventDispatcher	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _stage:Stage;		private var _track:Sprite;		private var _slider:Sprite;		private var _timer:Timer;		private var _percent:Number;		private var _lowVal:Number;		private var _highVal:Number;		private var _startVal:Number;		private var _currentVal:Number;		private var _range:Number;		private var _axis:String;		private var _changeProp:String;		private var _precision:int;		private var _direction:int = 1;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Creates an instance of the Slider with the given data parameters.  If the SliderData.startValue parameter is set to something		 * higher than the SliderData.highValue or lower than the SliderData.lowValue parameter, the SliderData.startValue parameter is reset to one of those two values.		 * If you need the slider to decrease in value, simply set the SliderData.lowValue to be something higher than the SliderData.highValue 		 * (i.e. SliderData.lowValue = 100, SliderData.highValue = 0, pulling the slider will go from 100 to 0 rather than 0 to 100, thanks to John		 * Quintal for this addition). If you do not set the SliderData.precision parameter, your current value will be rounded to the nearest 		 * whole number and the slider will snap into place at the appropriate position on the track.		 * 		 * @param $sliderData The SliderData to use with the Slider		 * 		 * <p>		 * The $sliderData object takes the following values:		 * <ul>		 * <li>stage: The stage that the track and slider are sitting on</li>		 * <li>axis: The axis that the slider will be used on (SliderData.AXIS_X or SliderData.AXIS_Y)</li>		 * <li>track: The track to be used for the slider</li>		 * <li>slider: The sprite that will function as the slider</li>		 * <li>lowValue: A number representing the low value of the slider</li>		 * <li>highValue: A number representing the high value of the slider</li>		 * <li>startValue: A number representing the value the slider should start at (default: 0)</li>		 * <li>precision: An integer representing the number of decimal places to round the current value to (default: 0)</li>		 * </ul>		 * </p>		 */		public function Slider($sliderData:SliderData)		{			_stage = $sliderData.stage;			_axis = $sliderData.axis;			_track = $sliderData.track;			_slider = $sliderData.slider;			_lowVal = $sliderData.lowValue;			_highVal = $sliderData.highValue;			_startVal = $sliderData.startValue;			_precision = $sliderData.precision;						if (_lowVal > _highVal) _direction = -1;						_changeProp = (_axis == SliderData.AXIS_X) ? "width" : "height";			_range = (_lowVal <= 0) ? (Math.abs(_lowVal) + _highVal) : (_highVal - _lowVal);			_timer = new Timer(10);						if ((_startVal * _direction) < (_lowVal * _direction)) _startVal = _lowVal;			if ((_startVal * _direction) > (_highVal * _direction)) _startVal = _highVal;						manageRestingPosition(_startVal);			initEvents();		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				// Initializes the slider and timer events.		private function initEvents():void		{			_slider.buttonMode = true;			_slider.tabEnabled = false;			_slider.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);			_slider.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);						_track.buttonMode = true;			_track.tabEnabled = false;			_track.addEventListener(MouseEvent.MOUSE_DOWN, handleTrackMouseDown);						_timer.addEventListener(TimerEvent.TIMER, updateInfo);		}				// manages the resting position depending on what value is passed in		private function manageRestingPosition($val:Number):void		{			if ($val < 0)			{				_percent = ((Math.abs(_lowVal + Math.abs($val)) * _direction) / _range);			}			else			{				_percent = ((Math.abs(_lowVal - $val) * _direction) / _range);			}						_currentVal = roundToPrecision((_lowVal + (_range * _percent)), _precision);						if (_axis == SliderData.AXIS_X)			{				_slider[_axis] = (_track[_axis] + (_percent * _track[_changeProp]));			}			else			{				_slider[_axis] = (_track[_axis] - (_percent * _track[_changeProp]));			}		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Enables the controls of the Slider.		 * 		 * @return void		 */		public function enable():void		{			initEvents();						dispatchEvent(new SliderEvent(SliderEvent.ON_ENABLED, _percent, _currentVal, _slider, _track));		}				/**		 * Disables the controls of the Slider.		 * 		 * @return void		 */		public function disable():void		{			_slider.buttonMode = false;			_track.buttonMode = false;						_slider.removeEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);			_slider.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);			_track.removeEventListener(MouseEvent.MOUSE_DOWN, handleTrackMouseDown);			_timer.removeEventListener(TimerEvent.TIMER, updateInfo);						dispatchEvent(new SliderEvent(SliderEvent.ON_DISABLED, _percent, _currentVal, _slider, _track));		}				/**		 * Cleans up the Slider for garbage collection.		 * 		 * @return void		 */		public function destroy():void		{			disable();						_timer = null;		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------			// Starts the dragging of the slider and starts the timer to dispatch percentage.		private function handleMouseDown($evt:MouseEvent):void		{			dispatchEvent(new SliderEvent(SliderEvent.ON_PRESS, _percent, _currentVal, _slider, _track));						if (_axis == SliderData.AXIS_X)			{				_slider.startDrag(false, new Rectangle(_track.x, _slider.y, _track.width, 0));			}			else			{				_slider.startDrag(false, new Rectangle(_slider.x, _track.y, 0, -_track.height));			}						_timer.start();			_stage.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}				// Stops the slider dragging and timer.		private function handleMouseUp($evt:MouseEvent):void		{			dispatchEvent(new SliderEvent(SliderEvent.ON_RELEASE, _percent, _currentVal, _slider, _track));						_slider.stopDrag();			_timer.reset();						manageRestingPosition(_currentVal);						_stage.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}				// calculates percentage of track clicked and moves slider over to appropriate position		private function handleTrackMouseDown($evt:MouseEvent):void		{			var m:Number = (_axis == SliderData.AXIS_X) ? _stage.mouseX : _stage.mouseY;			var globalPoint:Point = _track.localToGlobal(new Point(0, 0));			var diff:Number = (_track[_changeProp] - ((globalPoint[_axis] + _track[_changeProp]) - m));						_percent = (diff / _track[_changeProp]);						currentValue = roundToPrecision((_lowVal + (_range * _percent)), _precision);						dispatchEvent(new SliderEvent(SliderEvent.ON_UPDATE, _percent, _currentVal, _slider, _track));		}				// Updates the info of the slider's position.		private function updateInfo($evt:TimerEvent):void		{			_percent = Math.abs((_slider[_axis] - _track[_axis]) / _track[_changeProp]);			_currentVal = roundToPrecision((_lowVal + (_range * _percent)), _precision);						dispatchEvent(new SliderEvent(SliderEvent.ON_UPDATE, _percent, _currentVal, _slider, _track));		}//- GETTERS & SETTERS -------------------------------------------------------------------------------------			/**		 * Returns the percentage of the slider's position on the track, between 0 and 1.		 * 		 * @return Number		 */		public function get percent():Number		{		    return _percent;		}				/**		 * Sets the slider's percentage according to the one provided and physically moves it to the corresponding position on the track.		 * 		 * @param $val The value to set the percentage to.		 * 		 * @return void		 */		public function set percent($val:Number):void		{		    _percent = $val;		    		    manageRestingPosition(_percent);		}				/**		 * Returns the current value of the slider's position on the track.		 * 		 * @return Number		 */		public function get currentValue():Number		{		    return _currentVal;		}				/**		 * Sets the slider's current value according to the one provided and physically moves it to the corresponding position on the track.		 * 		 * @param $val The value to set the currentValue to.		 * 		 * @return void		 */		public function set currentValue($val:Number):void		{		    _currentVal = $val;		    		    manageRestingPosition(_currentVal);		}	//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		override public function toString():String		{			return getQualifiedClassName(this);		}				// rounds a number off to the specified precision point		private function roundToPrecision($num:Number, $precision:int = 0):Number		{			var decimalPlaces:Number = Math.pow(10, $precision);						return (Math.round(decimalPlaces * $num) / decimalPlaces);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}