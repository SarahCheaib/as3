package com.reintroducing.ui.mousepositionpanel{	import flash.display.Sprite;
	import com.reintroducing.data.mousepositionpanel.MousePositionPanelData;
	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getQualifiedClassName;		/**	 * Creates a scrolling panel that allows for scrolling on the x or y axis depending on where the 	 * mouse pointer is within the panel as well as going with or against the mouse.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.2	 */	public class MousePositionPanel 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		protected var _holder:Sprite;		protected var _mc:Sprite;		protected var _mask:Sprite;		protected var _axis:String;		protected var _moveType:String;		protected var _moveDir:Number;		protected var _mouseAxis:String;		protected var _changeProp:String;		protected var _speed:Number;		protected var _end:Number;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Creates a new instance of the MousePositionPanel class.		 * 		 * @param $mousePositionPanelData The MousePositionPanelData to use with the MousePositionPanel		 * 		 * <p>		 * The $mousePositionPanelData object takes the following values:		 * <ul>		 * <li>itemHolder: The sprite that holds the content and mask clips</li>		 * <li>content: The sprite to be scrolled</li>		 * <li>masker: The sprite that is used as the mask for the scrollable content area</li>		 * <li>axis: A string value of either MousePositionPanelData.AXIS_X or MousePositionPanelData.AXIS_Y that determines what axis the content is scrolled along (default: MousePositionPanelData.AXIS_X)</li>		 * <li>moveType: A string, MousePositionPanelData.TYPE_WITH_MOUSE (moves with the mouse) or MousePositionPanelData.TYPE_AGAINST_MOUSE (moves away from the mouse), (default: MousePositionPanelData.TYPE_AGAINST_MOUSE)</li>		 * <li>speed: A number that represents how fast to scroll the content (default: 10)</li>		 * </ul>		 * </p>		 */	 	public function MousePositionPanel($mousePositionPanelData:MousePositionPanelData)		{			_holder	= $mousePositionPanelData.itemHolder;			_mc	= $mousePositionPanelData.content;			_mask= $mousePositionPanelData.masker;			_axis = $mousePositionPanelData.axis;			_moveType = $mousePositionPanelData.moveType;			_speed = $mousePositionPanelData.speed;						manageAxis();			manageMoveType();		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				// sets the proper axis properties		private function manageAxis():void		{			if (_axis == MousePositionPanelData.AXIS_X) 			{				_changeProp = "width";				_mouseAxis = "mouseX";			} 			else			{				_changeProp = "height";				_mouseAxis = "mouseY";			}		}				// sets the proper move direction		private function manageMoveType():void		{			(_moveType == MousePositionPanelData.TYPE_WITH_MOUSE) ? _moveDir = 1 : _moveDir = -1;		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Starts the panel scrolling in the proper direction.		 * 		 * @return void		 */		public function startPanel():void		{			_holder.addEventListener(MouseEvent.MOUSE_MOVE, movePanel);		}		/**		 * Stops the panel from scrolling any further.		 * 		 * @return void		 */		public function stopPanel():void		{			_mc.removeEventListener(Event.ENTER_FRAME, manageMovement);			_holder.removeEventListener(MouseEvent.MOUSE_MOVE, movePanel);		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------			// initializes the movement of the panel		protected function movePanel($evt:Event):void		{			var mousePercent:Number = (_holder[_mouseAxis] / _mask[_changeProp]);			var mSpeed:Number = (_moveDir == 1) ? (1 - mousePercent) : mousePercent;						_end = Math.round(-1 * ((_mc[_changeProp] - _mask[_changeProp]) * mSpeed));						_mc.addEventListener(Event.ENTER_FRAME, manageMovement);		}				// moves the panel		protected function manageMovement($evt:Event):void		{			if (_mc[_axis] == _end) 			{				_mc.removeEventListener(Event.ENTER_FRAME, manageMovement);			} 			else if (_mc[_axis] > _end) 			{				_mc[_axis] -= Math.ceil((_mc[_axis] - _end) * (_speed / 100));			} 			else if (_mc[_axis] < _end) 			{				_mc[_axis] += Math.ceil((_end - _mc[_axis]) * (_speed / 100));			}		}	//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}