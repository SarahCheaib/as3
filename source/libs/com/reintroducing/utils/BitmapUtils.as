package com.reintroducing.utils{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.getQualifiedClassName;	/**	 * Static utility methods used to manipulate bitmaps.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class BitmapUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function BitmapUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Creates a new bitmap which is a clone of the original.		 * 		 * @param $bmp The bitmap to be cloned		 * 		 * @return Bitmap		 */		public static function getClone($bmp:Bitmap):Bitmap		{			return new Bitmap($bmp.bitmapData.clone());		}				/**		 * Clears the BitmapData's contents.		 * 		 * @param $bmd The bitmap data to be cleared		 * 		 * @return void		 */		public static function clearBitmapData($bmd:BitmapData):void		{			$bmd.fillRect($bmd.rect, 0);		}				/**         * Slices a bitmap into a grid of tiles specified by row and column count.         *         * @param $bmp The bitmap to be tiled         * @param $numRows Number of rows         * @param $numCols Number of columns         *          * @return Array 2-Dimensional array of bitmaps         */         public static function createTiles($bmp:Bitmap, $numRows:int = 3, $numCols:int = 3):Array        {			var w:Number = ($bmp.width / $numCols);			var h:Number = ($bmp.height / $numRows);			var tiles:Array = [];			var rect:Rectangle;			var bmpTile:Bitmap;			var bmd:BitmapData;						for (var i:int = 0; i < $numRows; i++) 			{				tiles[i] = new Array();								for (var j:int = 0; j < $numCols; j++)				{					bmd = new BitmapData(w, h, true, 0x00000000);					rect = new Rectangle((j * w), (i * h), w, h);										bmd.copyPixels($bmp.bitmapData, rect, new Point(0, 0));										bmpTile = new Bitmap(bmd);										tiles[i][j] = bmpTile;				}			}						return tiles;        }	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}