package com.reintroducing.utils{	import flash.utils.getQualifiedClassName;		/**	 * Static utility methods used to manipulate colors.	 *  	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class ColorUtils	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function ColorUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				/**		 * Returns the value of red in the specified color (0 - 255).		 * 		 * @param $color The color, in hexadecimal format, to extract the red value from		 * 		 * @return uint		 */		public static function extractRed($color:uint):uint		{			return (($color >> 16) & 0xFF);		}				/**		 * Returns the value of green in the specified color (0 - 255).		 * 		 * @param $color The color, in hexadecimal format, to extract the green value from		 * 		 * @return uint		 */		public static function extractGreen($color:uint):uint		{			return (($color >> 8) & 0xFF);		}				/**		 * Returns the value of blue in the specified color (0 - 255).		 * 		 * @param $color The color, in hexadecimal format, to extract the blue value from		 * 		 * @return uint		 */		public static function extractBlue($color:uint):uint		{			return ($color & 0xFF);		}				/**		 * Returns the value of alpha in the specified color (0 - 255).		 * 		 * @param $color The color, in hexadecimal format, to extract the blue value from		 * 		 * @return uint		 */		public static function extractAlpha($color:uint):uint		{			return (($color >> 24 ) & 0xFF);		}				/**		 * Combines red, blue, and green components into a color value.		 * 		 * @param $r The red value		 * @param $g The green value		 * @param $b The blue value		 * 		 * @return uint The numerical representation of the combined colors		 */		public static function combineRGB($r:uint, $g:uint, $b:uint):uint		{			return (($r << 16) | ($g << 8) | $b);		}				/**		 * Combines alpha, red, blue, and green components into a color value.		 * 		 * @param $a The alpha value		 * @param $r The red value		 * @param $g The green value		 * @param $b The blue value		 * 		 * @return uint The numerical representation of the combined colors		 */		public static function combineARGB($a:uint, $r:uint, $g:uint, $b:uint):uint		{			return (($a << 24) | ($r << 16) | ($g << 8) | $b);		}				/**		 * Displays the specified numerical representation of a color (RGB) as a hexadecimal string.		 * 		 * @param $color The numerical value of a color		 * 		 * @return String The color represented in hexadecimal RGB		 */		public static function displayRGBasHex($color:uint):String		{			var r:String = extractRed($color).toString(16).toUpperCase();			var g:String = extractGreen($color).toString(16).toUpperCase();			var b:String = extractBlue($color).toString(16).toUpperCase();			var zero:String = "0";						if (r.length == 1) r = zero.concat(r);			if (g.length == 1) g = zero.concat(g);			if (b.length == 1) b = zero.concat(b);						return String(r + g + b);		}				/**		 * Displays the specified numerical representation of a color (ARGB) as a hexadecimal string.		 * 		 * @param $color The numerical value of a color		 * 		 * @return String The color represented in hexadecimal ARGB		 */		public static function displayARGBasHex($color:uint):String		{			var a:String = extractAlpha($color).toString(16).toUpperCase();			var r:String = extractRed($color).toString(16).toUpperCase();			var g:String = extractGreen($color).toString(16).toUpperCase();			var b:String = extractBlue($color).toString(16).toUpperCase();			var zero:String = "0";						if (a.length == 1) a = zero.concat(a);			if (r.length == 1) r = zero.concat(r);			if (g.length == 1) g = zero.concat(g);			if (b.length == 1) b = zero.concat(b);						return String(a + r + g + b);		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}