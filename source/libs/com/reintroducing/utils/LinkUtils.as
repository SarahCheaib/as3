package com.reintroducing.utils{	import com.reintroducing.data.link.LinkData;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.getQualifiedClassName;	/**	 * Static utility methods to easily create external links.	 *  	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class LinkUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function LinkUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Launches a link with the specified data.		 * 		 * @param $linkData The LinkData to pass in to the request		 * 		 * @return void		 */		public static function launch($linkData:LinkData):void 		{			var url:URLRequest = new URLRequest($linkData.sourceURL);						navigateToURL(url, $linkData.targetWindow);		}				/**		 * Opens a popup window with the specified data.		 * 		 * @param $linkData The LinkData to pass in to the popup		 * 		 * @return void		 */		public static function openPopup($linkData:LinkData):void 		{			if (ExternalInterface.available) 			{				var params:String = "";				params += "width=" + $linkData.windowWidth;				params += ",height=" + $linkData.windowHeight;				params += ",left=" + $linkData.windowX;				params += ",top=" + $linkData.windowY;								params += ",status=" + String(($linkData.statusBar) ? "1" : "0");				params += ",toolbar=" + String(($linkData.toolBar) ? "1" : "0");				params += ",location=" + String(($linkData.location) ? "1" : "0");				params += ",menubar=" + String(($linkData.menuBar) ? "1" : "0");				params += ",directories=" + String(($linkData.directories) ? "1" : "0");				params += ",resizable=" + String(($linkData.resizable) ? "1" : "0");				params += ",scrollbars=" + String(($linkData.scrollBars) ? "1" : "0");				params += ",copyhistory=" + String(($linkData.scrollBars) ? "1" : "0");				params += ",fullscreen=" + String(($linkData.fullScreen) ? "1" : "0");								ExternalInterface.call("window.open", $linkData.sourceURL, $linkData.windowName, params);			}			else			{				var javaScriptStr:String = "javascript:NewWindow=window.open('";				javaScriptStr += $linkData.sourceURL;				javaScriptStr += "','" + $linkData.windowName + "','";								javaScriptStr += "height=" + $linkData.windowHeight;				javaScriptStr += ",width=" + $linkData.windowWidth;				javaScriptStr += ",left=" + $linkData.windowX;				javaScriptStr += ",top=" + $linkData.windowY;								javaScriptStr += ",status=" + String(($linkData.statusBar) ? "yes" : "no");				javaScriptStr += ",toolbar=" + String(($linkData.toolBar) ? "yes" : "no");				javaScriptStr += ",location=" + String(($linkData.location) ? "yes" : "no");				javaScriptStr += ",menubar=" + String(($linkData.menuBar) ? "yes" : "no");				javaScriptStr += ",directories=" + String(($linkData.directories) ? "yes" : "no");				javaScriptStr += ",resizable=" + String(($linkData.resizable) ? "yes" : "no");				javaScriptStr += ",scrollbars=" + String(($linkData.scrollBars) ? "yes" : "no");				javaScriptStr += ",copyhistory=" + String(($linkData.copyHistory) ? "yes" : "no");				javaScriptStr += ",fullscreen=" + String(($linkData.fullScreen) ? "yes" : "no");				javaScriptStr += "'); NewWindow.focus(); void(0);";								var url:URLRequest = new URLRequest(javaScriptStr);								navigateToURL(url);			}		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}