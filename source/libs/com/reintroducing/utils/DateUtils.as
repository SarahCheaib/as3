package com.reintroducing.utils{	import flash.utils.getQualifiedClassName;		/**	 * Static utility methods used to manipulate dates.	 *  	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class DateUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private static const MONTHS:Array = [" JANUARY JAN 01 1 ", " FEBRUARY FEB 02 2 ", " MARCH MAR 03 3 ", " APRIL APR 04 4 ", " MAY 05 5 ", " JUNE JUN 06 6 ", " JULY JUL 07 7 ", " AUGUST AUG 08 8 ", " SEPTEMBER SEP 09 9 ", " OCTOBER OCT 10 ", " NOVEMBER NOV 11 ", " DECEMBER DEC 12 "];		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function DateUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				private static function parseYear($n:Number):Number 		{			if ($n > 100) 			{				return $n;			} 			else 			{				var today:Date = new Date();				var localYear:Number = (today.getFullYear() - 2000);								if ($n < localYear) 				{					return ($n + 2000);				} 				else 				{					return ($n + 1900);				}			}		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Returns time in hh:mm:ss format from seconds.		 * 		 * @param $time The time to convert, in seconds		 * 		 * @return String		 */		public static function formatTime($time:Number):String		{			var remainder:Number;			var hours:Number = ($time / (60 * 60));						remainder = (hours - Math.floor(hours));			hours = Math.floor(hours);						var minutes:Number = (remainder * 60);						remainder = (minutes - Math.floor(minutes));						minutes = Math.floor(minutes);						var seconds:Number = (remainder * 60);						remainder = (seconds - Math.floor(seconds));						seconds = Math.floor(seconds);						var hString:String = hours < 10 ? "0" + hours : "" + hours;				var mString:String = minutes < 10 ? "0" + minutes : "" + minutes;			var sString:String = seconds < 10 ? "0" + seconds : "" + seconds;									if ($time < 0 || isNaN($time)) return "00:00";												if (hours > 0)			{							return hString + ":" + mString + ":" + sString;			}			else			{				return mString + ":" + sString;			}		}				/**		 * Converts a date provided as a string into a Date object.		 * Pass something like "January 1, 2007" or "Jan 1 2007" or "1/1/2007"		 * 		 * @param $s The date to convert		 * 		 * @return Date		 */		public static function stringToDate($s:String):Date 		{			$s = $s.toUpperCase();			$s = $s.split(",").join(""); // eliminate commas			$s = $s.split("/").join(" "); // replace slashes with spaces						var a:Array = $s.split(" "); 			var paddedMonth:String = String(" " + a[0] + " ");			var m:Number;			var i:int;						for (i = 0; i < MONTHS.length; i++) 			{				if (MONTHS[i].indexOf(paddedMonth) != -1) 				{					m = i;					break;				}			}						if (isNaN(m) || isNaN(a[1]) || Number(a[1]) > 31 || Number(a[1]) < 1 || isNaN(a[2])) 			{				return null;			}						return new Date(parseYear(a[2]), m, a[1]);		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}