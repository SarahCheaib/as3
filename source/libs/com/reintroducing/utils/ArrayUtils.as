package com.reintroducing.utils{	import flash.utils.getQualifiedClassName;	/**	 * Static utility methods used to manipulate arrays.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class ArrayUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function ArrayUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				/**		 * Randomizes the order of items in an array.		 * 		 * @param $array The array to randomize		 * 		 * @return Array		 */		public static function randomize($array:Array):Array 		{			var returnArray:Array = [];			var orgArray:Array = $array.slice();						while (orgArray.length > 0) 			{				var r:int = (Math.random() * orgArray.length) >> 0;								returnArray.push(orgArray.splice(r, 1)[0]);			}						return returnArray;		}				/**		 * Removes duplicate items from an array.		 * 		 * @param $array The array to remove duplicates in		 * 		 * @return Array		 */		public static function removeDuplicates($array:Array):Array		{			return $array.filter(function(e:*, i:int, a:Array):Boolean {return a.indexOf(e) == i;});		}				/**		 * Duplicates an array without altering the original.		 * 		 * @param $array The array to duplicate		 * 		 * @return Array		 */		public static function clone($array:Array):Array 		{	        return $array.concat();	    }				/**		 * Returns the index of the specified value.		 * 		 * @param $array The array to check		 * @param $value The value to test against		 * 		 * @return int		 */		public static function getIndex($array:Array, $value:*):int		{			for (var i:int = 0; i < $array.length; i++) 			{				if ($array[i] == $value) {return i;}			}						return -1;		}				/**		 * Choose an item randomly from a number of different values.		 * 		 * @param args The items to choose from		 * 		 * <pre>		 * 		var val:* = ArrayUtils.getRandomItem(10, "Hello", "0xFF0000", 1000);		 * </pre>		 * 		 * @return An unspecified value that is selected at random		 */		public static function getRandomItem(...args:Array):*		{			return args[int(Math.random() * args.length)];		}				/**		 * Returns the number of instances of an item within a given array.		 * 		 * @param $array The array to check in		 * @param $item The item to check for		 * 		 * @return uint		 */		public static function contains($array:Array, $item:*):uint		{			var i:int = $array.indexOf($item, 0);			var t:uint = 0;				while (i != -1)			{				i = $array.indexOf($item, (i + 1));				t++;			}				return t;		}				/**		 * Removes all instances of the specified value from an array.		 * 		 * @param $array The array to check in		 * @param $value The value to check for		 * 		 * @return void		 */		public static function removeValue($array:Array, $value:Object):void		{			var len:uint = $array.length;				for (var i:Number = len; i > -1; i--)			{				if ($array[i] === $value)				{					$array.splice(i, 1);				}			}		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}