package com.reintroducing.utils{	import com.reintroducing.data.flashvars.FlashVar;	import com.reintroducing.data.flashvars.FlashVars;	import flash.display.LoaderInfo;	import flash.external.ExternalInterface;	import flash.utils.getQualifiedClassName;	/**	 * A manager for FlashVars and QueryStrings.  You can create default values for use while in production 	 * and it will automatically parse any FlashVars and QueryStrings passed into it when deployed.	 * 	 * <pre>	 * 		var fvm:FlashVarsManager = FlashVarsManager.getInstance(loaderInfo);	 * 		fvm.addDefault("testPath", "../test/folder/here");	 * 		fvm.addDefault("servicePath", "../service/here");	 * 		fvm.addDefault("imagePath", "../img/folder/here");	 * 		fvm.initialize();	 * 			 * 		fvm.flashVars.output();	 * 			 * 		trace(fvm.getByName("servicePath").value);	 * 		trace(fvm.getValueByName("imagePath"));	 * </pre>	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.0	 */	public class FlashVarsManager	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		// singleton instance		private static var _instance:FlashVarsManager;		private static var _allowInstance:Boolean;				private var _loaderInfo:LoaderInfo;		private var _flashVars:FlashVars;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			// singleton instance of FlashVarsManager		public static function getInstance($loaderInfo:LoaderInfo = null):FlashVarsManager 		{			if (_instance == null)			{				_allowInstance = true;				_instance = new FlashVarsManager($loaderInfo);				_allowInstance = false;			}						return _instance;		}				public function FlashVarsManager($loaderInfo:LoaderInfo) 		{			if (!_allowInstance)			{				throw new Error("Error: Use FlashVarsManager.getInstance() instead of the new keyword.");			}			else			{				_loaderInfo = $loaderInfo;				_flashVars = new FlashVars("FlashVars");			}		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				// creates a new FlashVar		private function createFlashVar($name:String, $value:String):FlashVar 		{			var flashVar:FlashVar = new FlashVar();			flashVar.name = $name;			flashVar.value = $value;						return flashVar;		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				/**		 * Initializes the FlashVars and parses any QueryString params that were passed into the SWF for usage within the FlashVarsManager.		 * 		 * @return void		 */		public function initialize():void 		{			var params:Object = _loaderInfo.parameters;						if (ExternalInterface.available)			{				// get query string				var queryString:String = ExternalInterface.call("document.location.search.toString");								if (queryString != null && queryString != "")				{					var querySplit:Array = String(queryString.split("?")[1]).split("&");					var queryVarName:String;					var queryVarValue:String;										// add query string params					for (var i:int = 0; i < querySplit.length; i++)					{						queryVarName = String(querySplit[i]).split("=")[0];						queryVarValue = String(querySplit[i]).split("=")[1];												if (_flashVars.getItemByName(queryVarName) != null)						{							_flashVars.getItemByName(queryVarName).value = queryVarValue;						}						else						{							_flashVars.addItem(this.createFlashVar(queryVarName, queryVarValue));						}					}				}								// add flashvars				for (var varName:String in params) 				{					if (_flashVars.getItemByName(varName) != null)					{						_flashVars.getItemByName(varName).value = params[varName];					}					else					{						_flashVars.addItem(this.createFlashVar(varName, params[varName]));					}				}			}			else			{				trace("WARNING: FlashVars could not be retrieved!");			}		}				/**		 * Returns a FlashVar by its specified name.		 * 		 * @param $name The name of the FlashVar to retrieve		 * 		 * @return FlashVar		 */		public function getByName($name:String):FlashVar 		{			return (_flashVars.getItemByName($name) as FlashVar);		}				/**		 * Returns a FlashVar's value by its specified name.		 * 		 * @param $name The name of the FlashVar to retrieve		 * 		 * @return String		 */		public function getValueByName($name:String):String 		{			return (_flashVars.getItemByName($name) as FlashVar).value;		}		/**		 * Adds a default value to a FlashVar.		 * 		 * @param $name The name of the FlashVar to set the value on		 * @param $value The value to set it to		 * 		 * @return void		 */		public function addDefault($name:String, $value:String):void 		{			if (_flashVars.getItemByName($name) != null)			{				_flashVars.getItemByName($name).value = $value;			}			else			{				_flashVars.addItem(createFlashVar($name, $value));			}		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------			/**		 * Returns a collection of strongly typed FlashVars.		 * 		 * @return FlashVars		 */		public function get flashVars():FlashVars		{		    return _flashVars;		}	//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}