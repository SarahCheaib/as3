package com.reintroducing.utils{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import flash.net.SharedObject;	import flash.utils.getQualifiedClassName;	/**	 * A simple utility to manage shared objects and their properties.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.1	 */	public class SharedObjectManager extends EventDispatcher	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _so:SharedObject;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Creates a new instance of the SharedObjectManager class.		 * 		 * @param $name A string value representing the shared object to create/retrieve from the user's hard drive		 * @param $localPath (Optional) A string value representing the path to where the shared object is stored locally		 * @param $secure (Optional) A boolean that determines whether access to this shared object is restricted to SWF files that are delievered over an HTTPS connection		 */		public function SharedObjectManager($name:String, $localPath:String = null, $secure:Boolean = false)		{			_so = SharedObject.getLocal($name, $localPath, $secure);			_so.addEventListener(NetStatusEvent.NET_STATUS, onStatus);		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				private function onStatus($evt:NetStatusEvent):void		{			switch ($evt.info.code)			{				case "SharedObject.Flush.Success":					dispatchEvent(new Event(Event.COMPLETE));					break;								case "SharedObject.Flush.Failed":					dispatchEvent(new Event(Event.CANCEL));					break;			}		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Sets a "cookie" (property/value pair) object in the current shared object and saves it to the user's hard drive.		 * 		 * @param $obj An object that represents the property/value pair to be stored in the shared object		 * 		 * @return void		 */		public function setProperty($obj:Object):void		{			var prop:String;						for (prop in $obj)			{				_so.data[prop] = $obj[prop];				_so.flush();			}		}				/**		 * Returns the value for the requested property.		 * 		 * @param $name A string that represents the name of the property you want to retrieve		 * 		 * @return String		 */		public function getProperty($name:String):String		{			return _so.data[$name];		}				/**		 * Clears the current shared object.		 * 		 * @return void		 */		public function clear():void		{			_so.clear();		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public override function toString():String 		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}