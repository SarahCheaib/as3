package com.reintroducing.utils{	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.utils.getQualifiedClassName;	/**	 * Static utility methods used to manipulate DisplayObjects.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class DisplayObjectUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function DisplayObjectUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Removes all the children from the specified DisplayObjectContainer.		 * 		 * @param $do The DisplayObjectContainer to remove children from		 * 		 * @return void		 */		public static function removeAllChildren($do:DisplayObjectContainer):void		{			while ($do.numChildren)			{				$do.removeChildAt(0);			}		}				/**		 * Resizes a DisplayObject to the specified width/height and allows to control aspect ratio.		 * Originally written by Evan Mullins [http://blog.circlecube.com/]		 * 		 * @param $do The DisplayObject to resize		 * @param $maxW The maximum desired width		 * @param $maxH The maximum desired height (default: 0, matches $maxW and resizes into a square)		 * @param $constrainProportions A boolean that identifies if you should maintain the aspect ratio		 * 		 * @return void		 */		public static function resizeTo($do:DisplayObject, $maxW:Number, $maxH:Number = 0, $constrainProportions:Boolean = true):void		{		    $maxH = ($maxH == 0) ? $maxW : $maxH;		    		    $do.width = $maxW;		   	$do.height = $maxH;		    		    if ($constrainProportions) 		    {		    	($do.scaleX < $do.scaleY) ? $do.scaleY = $do.scaleX : $do.scaleX = $do.scaleY;		    }		}				/**		 * Plays all MovieClips (and any of their children) on the specified object's timeline.		 * If any of the clips have reached their last frame, they will not replay.		 * 		 * @param $obj The timeline (and all of its children) to play the MovieClips of		 * 		 * @return void		 */		protected function playMovieClips($obj:DisplayObject):void		{			var mc:MovieClip = $obj as MovieClip;						if (mc == null) 			{				return;			}						if (mc.currentFrame != mc.totalFrames) mc.play();						var i:int = mc.numChildren;						while (--i > -1)			{				playMovieClips(mc.getChildAt(i));			}		}				/**		 * Stops all MovieClips (and any of their children) on the specified object's timeline.		 * 		 * @param $obj The timeline (and all of its children) to stop the MovieClips of		 * 		 * @return void		 */		protected function stopMovieClips($obj:DisplayObject):void		{			var mc:MovieClip = $obj as MovieClip;						if (mc == null) 			{				return;			}						mc.stop();						var i:int = mc.numChildren;						while (--i > -1)			{				stopMovieClips(mc.getChildAt(i));			}		}				/**		 * Determines the frame number for the specified label.		 * 		 * @param $target The MovieClip to search for the frame label in		 * @param $label The name of the frame label		 * 		 * @return int The frame number of the label or -1 if the frame label was not found		 */		public function getFrameNumberForLabel($target:MovieClip, $label:String):int		{			var labels:Array = $target.currentLabels;			var l:int = labels.length;				while (l--)			{				if (labels[l].name == $label) return labels[l].frame;			}				return -1;		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}