package com.reintroducing.utils{	import flash.geom.Point;	import flash.utils.getQualifiedClassName;	/**	 * Static utility methods for working with mathematical equations and numbers.	 * 	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class MathUtils 	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function MathUtils()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				/**		 * Returns a random number in the specified range.		 * 		 * @param $low The lower end of the range		 * @param $high The higher end of the range		 * 		 * @return int		 */		public static function getRandomBetween($low:int = 0, $high:int = 1):int		{			return (Math.round(Math.random() * ($high - $low)) + $low);		}				/**		 * Determines if a number is prime (divisible by only 1 and itself).		 * 		 * @param $value The number to test		 * 		 * <pre>		 * 		trace(MathUtils.isPrime(13)); // traces true		 * 		trace(MathUtils.isPrime(4)); // traces false		 * </pre>		 * 		 * @return Boolean		 */		public static function isPrime($value:Number):Boolean		{			if ($value == 1 || $value == 2) return true;			if (isEven($value)) return false;				var s:Number = Math.sqrt($value);						for (var i:Number = 3; i <= s; i++)			{				if ($value % i == 0) return false;			}				return true;		}				/**		 * Determines if the number is an integer (containts no decimal values).		 * 		 * @param $value The number to test		 * 		 * <pre>		 * 		trace(MathUtils.isInteger(13)); // traces true		 * 		trace(MathUtils.isInteger(1.2345)); // traces false		 * </pre>		 * 		 * @return Boolean		 */		public static function isInteger($value:Number):Boolean		{			return ($value % 1) == 0;		}				/**		 * Determines if the number is even.		 * 		 * @param $num The number to test		 * 		 * @return Boolean		 */		public static function isEven($num:Number):Boolean		{		    return ($num & 1) == 0;		}				/**		 * Determines if the number is positive.		 * 		 * @param $num The number to test		 * 		 * @return Boolean		 */		public static function isPositive($num:Number):Boolean		{			return ($num >= 0) == true;		}				/**		 * Returns the absolute value of an integer.		 * 		 * @param $num The integer to use in the calculation		 * 		 * @return int		 */		public static function absInteger($num:int):int		{			return ($num ^ ($num >> 31)) - ($num >> 31);		}				/**		 * Determines if the specified value is included within a range.		 * The range values do no need to be specified in order.		 * 		 * @param $value The number to check		 * @param $firstValue Starting value of the range		 * @param $secondValue Ending value of the range		 * 		 * <pre>		 * 		trace(MathUtils.isBetween(3, 0, 5)); // traces true		 * 		trace(MathUtils.isBetween(7, 0, 5)); // traces false		 * </pre>		 * 		 * @return Boolean		 */		public static function isBetween($value:Number, $firstValue:Number, $secondValue:Number):Boolean		{			return !($value < Math.min($firstValue, $secondValue) || $value > Math.max($firstValue, $secondValue));		}				/**		 * Inserts commas every three digits in the integer of value.		 * 		 * @param value The number to insert commas into		 * 		 * @return String The value formatted with commas		 */		public static function insertCommas($value:Number):String		{			var valueString:String = String($value);			var commaIndex:int = valueString.indexOf(".");				if (commaIndex == -1) commaIndex = valueString.length;				do			{				commaIndex -= 3;					if (commaIndex <= 0) break;					valueString = valueString.substring(0, commaIndex) + "," + valueString.substr(commaIndex);			}			while (true);				if (valueString.substr(0, 2) == "0.") valueString = valueString.substr(1);				return valueString;		}				/**		 * Rounds to a decimal specified by the number of points.		 * 		 * @param $value The number to round		 * @param $points The number of points to round to		 * 		 * @return Number		 */		public static function roundToDecimal($value:Number, $points:int):Number		{			if ($points < 1)			{				return $value >> 0;			}						var delta:Number = Math.pow(10, $points);						return ($value * delta >> 0) / delta;		}				/**		 * Converts the number of degrees to radians.		 * 		 * @param $degrees The degrees to convert		 * 		 * @return Number		 */		public static function degreesToRadians($degrees:Number):Number		{			return ($degrees * (Math.PI / 180));		}				/**		 * Converts the number of radians into degrees.		 * 		 * @param $radians The radians to convert		 * 		 * @return Number		 */		public static function radiansToDegrees($radians:Number):Number		{			return ($radians * (180 / Math.PI));		}				/**		 * Gets the difference between two angles.		 * 		 * @param $angle1 The first angle		 * @param $angle2 the second angle		 * 		 * @return Number		 */		public static function getAngleDifference($angle1:Number, $angle2:Number):Number		{		    return Math.abs(($angle1 + 180 - $angle2) % 360 - 180);		}		/**		 * Rounds a number to the nearest value.		 * 		 * @param $roundTo The number to round to		 * @param $value The value to round		 * 		 * @return Number		 */		public static function roundToNearest($roundTo:Number, $value:Number):Number		{			return (Math.round($value / $roundTo) * $roundTo);		}				/**		 * Returns the angle between two points.		 * 		 * @param $x1 The X value of the first point		 * @param $y1 The Y value of the first point		 * @param $x2 The X value of the second point		 * @param $y2 The Y value of the second point		 * 		 * @return Number		 */		public static function getAngle($x1:Number, $y1:Number, $x2:Number, $y2:Number):Number 		{			var newX:Number = ($x2 - $x1);			var newY:Number = ($y2 - $y1);						return Math.round((-180 * Math.atan2(newX, newY)) / Math.PI);		}				/**		 * Returns the distance between two points.		 * 		 * @param $x1 The X value of the first point		 * @param $y1 The Y value of the first point		 * @param $x2 The X value of the second point		 * @param $y2 The Y value of the second point		 * 		 * @return Number		 */		public static function getDistance($x1:Number, $y1:Number, $x2:Number, $y2:Number):Number		{			var dx:Number = ($x2 - $x1);			var dy:Number = ($y2 - $y1);						return Math.sqrt((dx * dx) + (dy * dy));		}				/**		 * Generates and returns a truly unique (not random) integer.		 * Casting the return value as an int will result in an incorrect value because its such a large number.		 * 		 * <pre>		 * 		var _n:Number = MathUtils.generateUniqueInt(); // correct value, 1230707045775		 * 		var _i:int = _n; // incorrect value, -1948568177 		 * </pre>		 * 		 * @return Number		 */		public static function generateUniqueNumber():Number 		{			return new Date().time;		}				/**		 * Simplifies the supplied angle to its simplest representation.		 * 		 * @param $angle The angle to simplify		 * 		 * <pre>		 * 		var _simpAngle:Number = MathUtils.simplifyAngle(725); // returns 5		 * 		var _simpAngle2:Number = MathUtils.simplifyAngle(-725); // returns -5		 * </pre>		 * 		 * @return int		 */		public static function simplifyAngle($angle:Number):int 		{			var rotations:int = int($angle / 360);						return ($angle >= 0) ? ($angle - (360 * rotations)) : ($angle + (360 * rotations));		}				/**		 * Rotates a Point around another Point by the specified angle.		 * 		 * @param $point The Point to rotate		 * @param $centerPoint The Point to rotate this Point around		 * @param $angle The angle (in degrees) to rotate this point		 * 		 * @return void		 */		public function rotatePoint($point:Point, $centerPoint:Point, $angle:Number):void		{			var radians:Number = degreesToRadians($angle);			var baseX:Number = ($point.x - $centerPoint.x);			var baseY:Number = ($point.y - $centerPoint.y);				$point.x = ((Math.cos(radians) * baseX) - (Math.sin(radians) * baseY) + $centerPoint.x);			$point.y = ((Math.sin(radians) * baseX) + (Math.cos(radians) * baseY) + $centerPoint.y);		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}