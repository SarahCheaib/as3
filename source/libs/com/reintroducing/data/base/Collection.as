package com.reintroducing.data.base{	import flash.utils.getQualifiedClassName;	/**	 * Helper class used to manage a collection of objects. This class is similar to the Java	 * Collection interface.  Developers can extend this class to create new Collection types	 * that provide additional functionality such as ordering and sorting.	 * 	 * @author Adobe [http://www.adobe.com]	 * @author Ported to AS3 by Matt Przybylski [http://www.reintroducing.com]	 * @version 1.1	 */	public class Collection implements ICollection	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		protected var _name:String;		protected var _items:Array;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Constructor		 * 		 * @param $name the name of the Collection.		 */		public function Collection($name:String)		{			super();						_name = $name;			_items = new Array();		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				// Finds an item within the Collection and returns it's index.		private function internalGetItem($item:Object):int 		{			var result:int = -1;						for (var i:int = 0; i < _items.length; i++) 			{				if (_items[i] == $item) 				{					result = i;					break;				}			}						return result; 		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Gets the name of the Collection.		 * 		 * @return String the name of the Collection.		 */		public function getName():String 		{			return _name;		}				/**		 * Adds a new item to the end of the Collection.		 * 		 * @param $item * to be added to the Collection. If item is null it will not be added to the Collection.		 * 		 * @return Boolean true if the Collection was changed as a result of the operation.		 */		public function addItem($item:*):Boolean 		{			var result:Boolean = false;						if ($item != null)			{				_items.push($item);								result = true;			} 						return result;		}				/**		 * Adds an array of items to the Collection.		 * 		 * @param items An array of items to be added		 * 		 * @return void		 */		public function addItems(...$items):void		{			for each (var item:* in $items)			{				addItem(item);			}		}				/**		 * Adds a new item at the specified index in the Collection.		 * 		 * @param $index position to add the specified item in		 * @param $item * to be added to the Collection.		 * 		 * @return void		 */		public function addItemAt($index:int, $item:*):void 		{			_items.splice($index, 0, $item);		}				/**		 * Removes a single item from the Collection.  Returns false if item is not found.		 * 		 * @param $item reference to Collection item to be removed from Collection.		 * 		 * @return Boolean true if item is found and successfully removed.  False if item is not found.		 */		public function removeItem($item:*):Boolean 		{			var result:Boolean = false;			var itemIndex:int = internalGetItem($item);						if (itemIndex > -1)			{				_items.splice(itemIndex, 1);								result = true;			}						return result;		}				/**		 * Removes all items from the Collection.		 * 		 * @return void		 */		public function clear():void 		{			_items.length = 0;		}				/**		 * Reverses the Collection.		 * 		 * @return void		 */		public function reverse():void 		{			_items.reverse();		}				/**		 * Returns true if this Collection contains the specified item.		 * 		 * @param $item * whose presence in this collection is to be tested. 		 * 		 * @return Boolean true if this collection contains the specified item.		 */		public function contains($item:*):Boolean 		{			return (internalGetItem($item) > -1);		}				/**		 * Returns an item within the Collection using it's index.		 * 		 * @param $index location of item within the Collection.		 * 		 * @return * reference to item.		 */		public function getItemAt($index:int):* 		{			return _items[$index];		}				/**		 * Returns an iterator over the elements in this collection. There are no guarantees concerning 		 * the order in which the elements are returned (unless this collection is an instance of some 		 * class that provides a guarantee).		 * 		 * @return Iterator object that is used to iterate through the collection.		 */		public function getIterator():Iterator 		{			return (new Iterator(this));		}				/**		 * Returns the current length		 * 		 * @return int value reflecting the number of items in this Collection.		 */		public function getLength():int		{			return _items.length;		}				/**		 * Returns true if the Collection is empty.		 * 		 * @return Boolean true if Collection is empty.		 */		public function isEmpty():Boolean 		{			return (_items.length == 0);		}				/**		 * Traces the Value Objects of the Collection to the Output panel.		 * 		 * @return void		 */		public function output():void		{			trace("Start " + getName() + " Contents:");			trace("---------------------------------------------\n");						for (var i:int = 0; i < getLength(); i++)			{				var vo:IValueObject = getItemAt(i);								vo.output();			}						trace("End " + getName() + " Contents");			trace("---------------------------------------------\n");		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}