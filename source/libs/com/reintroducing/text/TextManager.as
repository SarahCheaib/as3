package com.reintroducing.text{	import com.reintroducing.data.text.TextManagerConstants;	import com.reintroducing.data.text.config.HTMLTextConfig;	import com.reintroducing.data.text.config.ITextConfig;	import com.reintroducing.data.text.config.InputTextConfig;	import com.reintroducing.data.text.config.StaticTextConfig;	import com.reintroducing.data.text.lang.Language;	import com.reintroducing.text.types.HTMLTextField;	import com.reintroducing.text.types.InputTextField;	import com.reintroducing.text.types.StaticTextField;	import flash.text.TextField;	import flash.utils.getQualifiedClassName;	/**	 * A singleton which allows you to easily create any type of TextField dynamically while using external CSS files.	 * You can create a Language to go along with it making it very easy to swap out different text styles for localization. 	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.0	 */	public class TextManager	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		// singleton instance		private static var _instance:TextManager;		private static var _allowInstance:Boolean;				private var _language:Language;		private var _debugMode:Boolean = false;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			// singleton instance of TextManager		public static function getInstance($language:Language = null):TextManager 		{			if (_instance == null)			{				_allowInstance = true;				_instance = new TextManager($language);				_allowInstance = false;			}						return _instance;		}				public function TextManager($language:Language) 		{			if (!_allowInstance)			{				throw new Error("Error: Use TextManager.getInstance() instead of the new keyword.");			}			else			{				if ($language == null) throw new Error("Language cannot be null.  Please define a Language with an associated styleSheet and pass it to TextManager.getInstance()");								_language = $language;			}		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------				/**		 * Creates a TextField of the specified type.		 * If debugMode is set to true the TextField will spit out the configuration into the trace panel.		 * 		 * @param $type The type of TextField to create (TextManagerConstants.TYPE_STATIC, TextManagerConstants.TYPE_HTML, or TextManagerConstants.TYPE_INPUT)		 * @param $content The text to populate the TextField with		 * @param $style The CSS style to use for the TextField (not used for HTML TextFields as those can be specified inline with the span tag)		 * @param $config The configuration to use for the TextField		 * 		 * @return TextField		 */		public function createTextField($type:String, $content:String, $style:String = null, $config:ITextConfig = null):TextField		{			var config:ITextConfig;			var tf:TextField;						switch ($type)			{				case TextManagerConstants.TYPE_STATIC:					config = ($config != null) ? ($config as StaticTextConfig) : new StaticTextConfig();					tf = StaticTextField.create(_language, config, $style, $content);										break;								case TextManagerConstants.TYPE_HTML:					config = ($config != null) ? ($config as HTMLTextConfig) : new HTMLTextConfig();					tf = HTMLTextField.create(_language, config, $content);										break;								case TextManagerConstants.TYPE_INPUT:					config = ($config != null) ? ($config as InputTextConfig) : new InputTextConfig();					tf = InputTextField.create(_language, config, $style, $content);										break;			}						if (_debugMode) config.output();						return tf;		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------			/**		 * Returns the Language associated with the TextManager.		 * 		 * @return Language		 */		public function get language():Language		{		    return _language;		}				/**		 * Sets the Language associated with the TextManager.		 * 		 * @param $val The Language to use		 * 		 * @return void		 */		public function set language($val:Language):void		{			_language = $val;		}				/**		 * Returns if the debug mode is set or not.		 * 		 * @return Boolean		 */		public function get debugMode():Boolean		{		    return _debugMode;		}				/**		 * Sets the debug mode.		 * 		 * @param $val Turns the debug mode on or off		 * 		 * @return void		 */		public function set debugMode($val:Boolean):void		{			_debugMode = $val;		}	//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}