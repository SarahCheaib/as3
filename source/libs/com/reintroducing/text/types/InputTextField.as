package com.reintroducing.text.types{	import com.reintroducing.data.text.config.ITextConfig;
	import com.reintroducing.data.text.config.InputTextConfig;	import com.reintroducing.data.text.lang.Language;	import flash.text.TextField;	import flash.utils.getQualifiedClassName;	/** 	 * Utility class used to create an Input TextField in the TextManager.	 *  	 * @author Matt Przybylski [http://www.reintroducing.com] 	 * @version 1.0 	 */	public class InputTextField	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------				//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			public function InputTextField()		{					}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------						//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Creates the TextField.		 * 		 * @param $language The Language to use from the TextManager		 * @param $config The text configuration to use		 * @param $style The name of the CSS style to use to style the TextField		 * @param $content The text which will populate the TextField		 * 		 * @return TextField		 */		public static function create($language:Language, $config:ITextConfig, $style:String, $content:String):TextField		{			var config:InputTextConfig = ($config as InputTextConfig);			var styleObj:Object = $language.styleSheet.getStyle(String("." + $style));			var tf:TextField = new TextField();			tf.type = config.type;			tf.defaultTextFormat = $language.styleSheet.transform(styleObj); 			tf.antiAliasType = config.antiAliasType;			tf.embedFonts = $language.embed;			tf.autoSize = config.autoSize;			tf.wordWrap = config.wordWrap;			tf.multiline = config.multiline;			tf.width = config.width;			tf.height = config.height;			tf.mouseEnabled = config.mouseEnabled;			tf.background = config.background;			tf.backgroundColor = config.backgroundColor;			tf.text = $content;						return tf;		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			/**		 * @private		 */		public function toString():String		{			return getQualifiedClassName(this);		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}